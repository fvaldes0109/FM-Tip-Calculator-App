{"version":3,"sources":["components/Input.jsx","components/TipButton.jsx","components/TipArea.jsx","components/Calculator.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Input","props","state","focused","checkField","bind","setFocus","flag","this","setState","name","value","re","match","onFinish","className","alt","src","size","placeholder","onChange","event","target","onFocus","onBlur","React","Component","TipButton","isActive","onClick","pcvalue","TipArea","tipSelect","index","onTipChange","parseFloat","activeTip","inputValue","Calculator","bill","inputBill","tip","people","inputPeople","totalTip","Number","toFixed","totalBill","onBillChange","onPeopleChange","resetData","prevProps","prevState","prevBill","prevTip","prevPeople","isFinite","parseInt","buttonDisabled","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d28220e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Input extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            focused: false,\n        }\n\n        this.checkField = this.checkField.bind(this);\n        this.setFocus = this.setFocus.bind(this)\n    }\n\n    setFocus(flag) {\n        this.setState({ focused: flag })\n    }\n\n    checkField(name, value) {\n        const re = name === 'bill'\n                    ? /^\\d+\\.?\\d*$/\n                    : /^[\\d]+$/;\n\n        if (value.match(re)) {\n            this.props.onFinish(value);\n        } else if (value === '') {\n            this.props.onFinish(null);\n        }\n    }\n\n    render() {\n        const { value, name } = this.props;\n        const { focused } = this.state;\n        return (\n            <div className={`input-area ${name} ${focused ? 'focused' : ''} ${value === '0' ? 'error-input' : ''} `}>\n                <img\n                    aria-hidden=\"true\"\n                    alt=\"\"\n                    src={`./images/icon-${name === 'bill' ? 'dollar' : 'person'}.svg`}\n                />\n                <input\n                    size=\"3\"\n                    placeholder=\"0\"\n                    value={value}\n                    onChange={(event) => {this.checkField(name, event.target.value)}}\n                    onFocus={() => this.setFocus(true)}\n                    onBlur={() => this.setFocus(false)}\n                />\n            </div>\n        )\n    }\n}\n","import React from 'react';\n\nexport default function TipButton(props) {\n    return (\n        <div\n            className={`tip-button${props.isActive === 'true' ? ' isActive' : ''}`}\n            onClick={props.onFinish}\n        >\n            {props.pcvalue}%\n        </div>\n    )\n}","import React from 'react';\n\nimport TipButton from './TipButton.jsx';\n\nexport default class TipArea extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            focused: false,\n        }\n\n        this.tipSelect = this.tipSelect.bind(this);\n        this.checkField = this.checkField.bind(this);\n        this.setFocus = this.setFocus.bind(this);\n    }\n\n    tipSelect(index, value) {\n        this.props.onTipChange(value, index);\n    }\n    \n    checkField(event) {\n        const value = event.target.value;\n        if (value.match(/^\\d+.?\\d*$/)) {\n            this.props.onTipChange(parseFloat(value), 6);\n        } else if (value === '') {\n            this.props.onTipChange(null, 6);\n        }\n    }\n\n    setFocus(flag) {\n        this.setState({ focused: flag })\n    }\n\n    render() {\n        const { activeTip, inputValue } = this.props;\n        const { focused } = this.state;\n        return(\n            <div className=\"grid-container\">\n                <TipButton isActive={activeTip === 1 ? \"true\" : \"false\"} pcvalue={5} onFinish={() => this.tipSelect(1, 5)} />\n                <TipButton isActive={activeTip === 2 ? \"true\" : \"false\"} pcvalue={10} onFinish={() => this.tipSelect(2, 10)} />\n                <TipButton isActive={activeTip === 3 ? \"true\" : \"false\"} pcvalue={15} onFinish={() => this.tipSelect(3, 15)} />\n                <TipButton isActive={activeTip === 4 ? \"true\" : \"false\"} pcvalue={25} onFinish={() => this.tipSelect(4, 25)} />\n                <TipButton isActive={activeTip === 5 ? \"true\" : \"false\"} pcvalue={50} onFinish={() => this.tipSelect(5, 50)} />\n                <input\n                    className={`tip-input ${focused ? 'focused' : ''}`}\n                    placeholder=\"Custom\"\n                    value={inputValue}\n                    onChange={this.checkField}\n                    onFocus={() => this.setFocus(true)}\n                    onBlur={() => this.setFocus(false)}\n                />\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nimport Input from './Input.jsx';\nimport TipArea from './TipArea.jsx';\n\nexport default class Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            bill: null,\n            inputBill: null,\n            tip: null,\n            people: null,\n            inputPeople: null,\n            totalTip: Number(0.00).toFixed(2),\n            totalBill: Number(0.00).toFixed(2),\n            activeTip: -1,\n        }\n\n        this.onBillChange = this.onBillChange.bind(this);\n        this.onPeopleChange = this.onPeopleChange.bind(this);\n        this.onTipChange = this.onTipChange.bind(this);\n        this.resetData = this.resetData.bind(this);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { bill: prevBill, tip: prevTip, people: prevPeople } = prevState;\n        const { bill, tip, people } = this.state;\n\n        if (bill !== prevBill || tip !== prevTip || people !== prevPeople) {\n            let totalTip = bill * tip / 100 / people;\n            let totalBill = bill / people + totalTip;\n            \n            // console.log(bill, prevBill);\n            totalTip = Number.isFinite(totalTip) ? totalTip : 0.00;\n            totalBill = Number.isFinite(totalBill) ? totalBill : 0.00;\n            \n            totalTip = Number(totalTip).toFixed(2);\n            totalBill = Number(totalBill).toFixed(2);\n\n            this.setState({ totalTip, totalBill });\n        }\n    }\n\n    resetData() {\n        this.setState({\n            bill: null, tip: null, people: null, activeTip: -1, inputBill: null, inputPeople: null,\n        });\n    }\n\n    onBillChange(value) {\n        this.setState({ bill: value ? parseFloat(value) : null, inputBill: value });\n    }\n\n    onPeopleChange(value) {\n        this.setState({ people: value ? parseInt(value) : null, inputPeople: value});\n    }\n\n    onTipChange(value, index) {\n        this.setState({ tip: value, activeTip: index });\n    }\n\n    render() {\n        const { activeTip, totalTip, totalBill, tip, inputBill, inputPeople } = this.state;\n        const buttonDisabled = !inputPeople && !tip && !inputBill ? true : false;\n        return (\n            <>\n                <div className=\"left\">\n                    <div className=\"bill area\">\n                        <p className=\"fieldname\">Bill</p>\n                        <Input\n                            value={inputBill ? inputBill : ''}\n                            name=\"bill\"\n                            onFinish={this.onBillChange}\n                        />\n                    </div>\n                    <div className=\"tip area\">\n                        <p className=\"fieldname\">Select Tip %</p>\n                        <TipArea\n                            activeTip={activeTip}\n                            inputValue={tip && activeTip === 6 ? tip : ''}\n                            onTipChange={(value, index) => this.onTipChange(value, index)}\n                        />\n                    </div>\n                    <div className=\"people area\">\n                        <div className=\"upper-text\">\n                            <p className=\"fieldname\">Number of People</p>\n                            <p className={inputPeople === '0' ? 'error-message' : 'invisible'}>\n                                Can't be zero\n                            </p>\n                        </div>\n                        <Input\n                            name=\"people\"\n                            value={inputPeople ? inputPeople : ''}\n                            onFinish={this.onPeopleChange}\n                        />\n                    </div>\n                </div>\n                <div className=\"right\">\n                    <div className=\"output-field\">\n                        <div className=\"texts\">\n                            <p className=\"amount\">Tip Amount</p>\n                            <p className=\"person\">/ person</p>\n                        </div>\n                        <p className=\"price\">\n                            ${totalTip}\n                        </p>\n                    </div>\n                    <div className=\"output-field\">\n                        <div className=\"texts\">\n                            <p className=\"amount\">Total</p>\n                            <p className=\"person\">/ person</p>\n                        </div>\n                        <p className=\"price\">\n                            ${totalBill}\n                        </p>\n                    </div>\n                    <button className=\"reset\" onClick={this.resetData} disabled={buttonDisabled}>\n                        RESET\n                    </button>\n                </div>\n            </>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Calculator from './components/Calculator';\n\nclass App extends Component {\n    render() {\n        return (\n            <>\n                <Calculator />\n            </>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}